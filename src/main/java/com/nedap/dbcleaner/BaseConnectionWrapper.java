package com.nedap.dbcleaner;

import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;
import java.sql.*;
import java.util.Map;
import java.util.Properties;
import java.util.concurrent.Executor;

/**
 * Wraps a JDBC Connection without any extra functionality, except for generating a connection number.
 *
 * @author Pieter Bos
 */
public class BaseConnectionWrapper implements Connection {

    protected Connection realConnection;

    /**
     * Get the underlying connection
     *
     * @return the underlying JDBC connection
     */
    public Connection getRealConnection() {
        return realConnection;
    }
    private static final Object connectionNumberLock = new Object();
    private final Integer connectionNumber;
    private static int lastConnectionNumber = 0;

    /**
     * Create a wrapper around an existing JDBC Connection object
     *
     * @param realConnection The existing JDBC Connection.
     */
    public BaseConnectionWrapper(Connection realConnection) {
        if (realConnection == null) {
            throw new IllegalArgumentException("realConnection cannot be null");
        }
        this.realConnection = realConnection;
        synchronized (connectionNumberLock) {
            connectionNumber = new Integer(++lastConnectionNumber);
        }
    }

    public Integer getConnectionNumber() {
        return connectionNumber;
    }

    // forwarding methods
    @Override
    public synchronized boolean isClosed() throws SQLException {
        return realConnection.isClosed();
    }

    @Override
    public synchronized SQLWarning getWarnings() throws SQLException {
        return realConnection.getWarnings();
    }

    @Override
    public synchronized Savepoint setSavepoint() throws SQLException {
        return realConnection.setSavepoint();
    }

    @Override
    public synchronized void releaseSavepoint(Savepoint savepoint) throws SQLException {
        realConnection.releaseSavepoint(savepoint);
    }

    @Override
    public synchronized void rollback(Savepoint savepoint) throws SQLException {
        realConnection.rollback(savepoint);
    }

    @Override
    public synchronized DatabaseMetaData getMetaData() throws SQLException {
        return realConnection.getMetaData();
    }

    public synchronized void clearWarnings() throws SQLException {
        realConnection.clearWarnings();
    }

    public synchronized Statement createStatement() throws SQLException {
        return realConnection.createStatement();
    }

    public synchronized Statement createStatement(int resultSetType, int resultSetConcurrency) throws SQLException {
        return realConnection.createStatement(resultSetType, resultSetConcurrency);
    }

    public synchronized Statement createStatement(int resultSetType, int resultSetConcurrency, int resultSetHoldability) throws SQLException {
        return realConnection.createStatement(resultSetType, resultSetConcurrency,
                resultSetHoldability);
    }

    public synchronized void setReadOnly(boolean readOnly) throws SQLException {
        realConnection.setReadOnly(readOnly);
    }

    public synchronized PreparedStatement prepareStatement(String sql) throws SQLException {
        return realConnection.prepareStatement(sql);
    }

    public synchronized PreparedStatement prepareStatement(String sql, int autoGeneratedKeys) throws SQLException {
        return realConnection.prepareStatement(sql, autoGeneratedKeys);
    }

    public synchronized PreparedStatement prepareStatement(String sql, int resultSetType, int resultSetConcurrency) throws SQLException {
        return realConnection.prepareStatement(sql, resultSetType, resultSetConcurrency);
    }

    public synchronized PreparedStatement prepareStatement(String sql, int resultSetType, int resultSetConcurrency,
            int resultSetHoldability) throws SQLException {
        return realConnection.prepareStatement(sql, resultSetType, resultSetConcurrency, resultSetHoldability);
    }

    public synchronized PreparedStatement prepareStatement(String sql, int columnIndexes[]) throws SQLException {
        return realConnection.prepareStatement(sql, columnIndexes);
    }

    public synchronized Savepoint setSavepoint(String name) throws SQLException {
        return realConnection.setSavepoint(name);
    }

    public synchronized PreparedStatement prepareStatement(String sql, String columnNames[]) throws SQLException {
        return realConnection.prepareStatement(sql, columnNames);
    }

    public synchronized Clob createClob() throws SQLException {
        return realConnection.createClob();
    }

    public synchronized Blob createBlob() throws SQLException {
        return realConnection.createBlob();
    }

    public synchronized NClob createNClob() throws SQLException {
        return realConnection.createNClob();
    }

    public synchronized SQLXML createSQLXML() throws SQLException {
        return realConnection.createSQLXML();
    }

    public synchronized boolean isValid(int timeout) throws SQLException {
        return realConnection.isValid(timeout);
    }

    public synchronized void setClientInfo(String name, String value) throws SQLClientInfoException {
        realConnection.setClientInfo(name, value);
    }

    public synchronized void setClientInfo(Properties properties) throws SQLClientInfoException {
        realConnection.setClientInfo(properties);
    }

    public synchronized String getClientInfo(String name) throws SQLException {
        return realConnection.getClientInfo(name);
    }

    public synchronized Properties getClientInfo() throws SQLException {
        return realConnection.getClientInfo();
    }

    public synchronized Array createArrayOf(String typeName, Object[] elements) throws SQLException {
        return realConnection.createArrayOf(typeName, elements);
    }

    public synchronized Struct createStruct(String typeName, Object[] attributes) throws SQLException {
        return realConnection.createStruct(typeName, attributes);
    }

    public synchronized boolean isReadOnly() throws SQLException {
        return realConnection.isReadOnly();
    }

    public synchronized void setHoldability(int holdability) throws SQLException {
        realConnection.setHoldability(holdability);
    }

    public synchronized CallableStatement prepareCall(String sql) throws SQLException {
        return realConnection.prepareCall(sql);
    }

    public synchronized CallableStatement prepareCall(String sql, int resultSetType, int resultSetConcurrency) throws SQLException {
        return realConnection.prepareCall(sql, resultSetType, resultSetConcurrency);
    }

    public synchronized CallableStatement prepareCall(String sql, int resultSetType, int resultSetConcurrency,
            int resultSetHoldability) throws SQLException {
        return realConnection.prepareCall(sql, resultSetType, resultSetConcurrency,
                resultSetHoldability);
    }

    public synchronized void setCatalog(String catalog) throws SQLException {
        realConnection.setCatalog(catalog);
    }

    public synchronized String nativeSQL(String sql) throws SQLException {
        return realConnection.nativeSQL(sql);
    }

    public synchronized Map<String, Class<?>> getTypeMap() throws SQLException {
        return realConnection.getTypeMap();
    }

    public synchronized void setAutoCommit(boolean autoCommit) throws SQLException {
        realConnection.setAutoCommit(autoCommit);

    }

    public synchronized String getCatalog() throws SQLException {
        return realConnection.getCatalog();
    }

    public synchronized void setTypeMap(java.util.Map<String, Class<?>> map) throws SQLException {
        realConnection.setTypeMap(map);
    }

    public synchronized void setTransactionIsolation(int level) throws SQLException {
        realConnection.setTransactionIsolation(level);
    }

    public synchronized boolean getAutoCommit() throws SQLException {
        return realConnection.getAutoCommit();
    }

    public synchronized int getHoldability() throws SQLException {
        return realConnection.getHoldability();
    }

    public synchronized int getTransactionIsolation() throws SQLException {
        return realConnection.getTransactionIsolation();
    }

    public synchronized void commit() throws SQLException {
        realConnection.commit();
    }

    public synchronized void rollback() throws SQLException {
        realConnection.rollback();
    }

    public synchronized void close() throws SQLException {
        realConnection.close();
    }

    @Override
    public synchronized <T> T unwrap(Class<T> iface) throws SQLException {

        String methodCall = "unwrap(" + (iface == null ? "null" : iface.getName()) + ")";
        return (iface != null && (iface == Connection.class)) ? (T) this : realConnection.unwrap(iface);
    }

    public synchronized boolean isWrapperFor(Class<?> iface) throws SQLException {
        return (iface != null && (iface == Connection.class))
                || realConnection.isWrapperFor(iface);
    }

    private Object invokeMethod(String name, Object... params) {
        try {
            Class[] paramTypes = new Class[params.length];
            int i = 0;
            for (Object o : params) {
                paramTypes[i++] = o.getClass();
            }
            Method m = realConnection.getClass().getMethod(name, paramTypes);
            return m.invoke(params);
        } catch (IllegalAccessException ex) {
            return null;
        } catch (IllegalArgumentException ex) {
            return null;
        } catch (InvocationTargetException ex) {
            return null;
        } catch (NoSuchMethodException ex) {
            return null;
        } catch (SecurityException ex) {
            return null;
        }
    }

    public synchronized void setSchema(String schema) throws SQLException {
        invokeMethod("setSchema", schema);
    }

    public synchronized String getSchema() throws SQLException {
        return (String) invokeMethod("getSchema", new Object[0]);
    }

    public synchronized void abort(Executor executor) throws SQLException {
        invokeMethod("abort", executor);
    }

    public synchronized void setNetworkTimeout(Executor executor, int milliseconds) throws SQLException {
        invokeMethod("setNetworkTimeout", executor, milliseconds);
    }

    public synchronized int getNetworkTimeout() throws SQLException {
        return (Integer) invokeMethod("setNetworkTimeout", new Object[0]);
    }
}
